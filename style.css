Gemini

2.5 Flash




Conversa com o Gemini

script (3)
JS
Quero ter a opção no agendamento de ter check-box para marcar mais de um:

Quem participa: Anciãos, Diáconos, Coop. Of, Coop. Jovens, ADM, Irmãs PIA, Porteiros, Conselho Anciãos, Conselho Diáconos.

Deve mostrar no relatório.




Análise
Você quer adicionar checkboxes para selecionar múltiplos participantes em um evento e que essa informação seja exibida no relatório PDF. Para isso, você precisará fazer as seguintes modificações no código JavaScript:

Adicionar os Checkboxes ao Modal de Eventos:

No HTML (não fornecido, mas implicado pelo JS), você precisará adicionar um grupo de checkboxes dentro do event-modal, cada um para um tipo de participante (Anciãos, Diáconos, etc.).
Atualizar a Estrutura do Evento no IndexedDB:

Modificar a função saveEvent para coletar os valores dos checkboxes marcados e armazená-los como um array no objeto eventData.
Modificar a Função openModal:

Ao abrir o modal para editar um evento existente, você precisará iterar sobre o array de participantes salvos no evento e marcar os checkboxes correspondentes.
Atualizar a Função exportToPDF:

Modificar a função exportToPDF para incluir a lista de participantes na tabela do PDF.
Aqui estão as alterações específicas que você precisaria fazer no seu arquivo script (3).js:

JavaScript

document.addEventListener('DOMContentLoaded', () => {
    // ELEMENTOS DO DOM
    const monthYearStr = document.getElementById('month-year-str');
    const calendarDays = document.getElementById('calendar-days');
    const prevMonthBtn = document.getElementById('prev-month-btn');
    const nextMonthBtn = document.getElementById('next-month-btn');
    const exportPdfBtn = document.getElementById('export-pdf-btn');

    // ELEMENTOS DO MODAL
    const eventModal = document.getElementById('event-modal');
    const modalTitle = document.getElementById('modal-title');
    const eventIdInput = document.getElementById('event-id');
    const eventTitleInput = document.getElementById('event-title-input');
    const eventDescInput = document.getElementById('event-desc-input');
    const saveEventBtn = document.getElementById('save-event-btn');
    const deleteEventBtn = document.getElementById('delete-event-btn');
    const closeBtn = document.querySelector('.close-btn');

    // NOVOS ELEMENTOS DO MODAL PARA PARTICIPANTES
    const participantCheckboxes = document.querySelectorAll('input[name="event-participant"]'); // Seleciona todos os checkboxes de participantes

    // ESTADO DO CALENDÁRIO
    let currentDate = new Date();
    let db;
    let selectedDate;

    // INICIALIZAÇÃO DO INDEXEDDB
    function initDB() {
        const request = indexedDB.open('agendaDB', 1);

        request.onerror = (event) => console.error("Erro no IndexedDB:", event.target.errorCode);

        request.onsuccess = (event) => {
            db = event.target.result;
            renderCalendar();
        };

        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            db.createObjectStore('events', { keyPath: 'id' });
        };
    }

    // RENDERIZAÇÃO DO CALENDÁRIO
    async function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        monthYearStr.textContent = `${new Date(year, month).toLocaleString('pt-br', { month: 'long' })} ${year}`;
        calendarDays.innerHTML = '';

        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        const events = await getEventsForMonth(year, month);

        for (let i = 0; i < firstDayOfMonth; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.classList.add('day', 'empty');
            calendarDays.appendChild(emptyDay);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const daySquare = document.createElement('div');
            daySquare.classList.add('day');
            daySquare.textContent = day;
            daySquare.dataset.date = new Date(year, month, day).toISOString().split('T')[0];

            const today = new Date();
            if (year === today.getFullYear() && month === today.getMonth() && day === today.getDate()) {
                daySquare.classList.add('today');
            }

            const dateStr = daySquare.dataset.date;
            if (events.some(e => e.id.startsWith(dateStr))) {
                const eventIndicator = document.createElement('div');
                eventIndicator.classList.add('event-indicator');
                daySquare.appendChild(eventIndicator);
            }

            daySquare.addEventListener('click', () => openModal(daySquare.dataset.date));
            calendarDays.appendChild(daySquare);
        }
    }

    async function openModal(date) {
        selectedDate = date;
        resetModal();

        const events = await getEventsForDate(date);

        modalTitle.textContent = 'Adicionar Evento';

        const existingList = document.getElementById('event-list');
        if (existingList) existingList.remove();

        if (events.length > 0) {
            const list = document.createElement('ul');
            list.id = 'event-list';
            list.style.marginTop = '15px';

            events.forEach(event => {
                const item = document.createElement('li');
                item.textContent = `${event.hour || '—'} - ${event.title}`;
                item.style.cursor = 'pointer';
                item.style.marginBottom = '5px';
                item.style.borderBottom = '1px solid #ccc';
                item.style.padding = '5px 0';

                item.addEventListener('click', () => {
                    eventIdInput.value = event.id;
                    eventTitleInput.value = event.title;
                    eventDescInput.value = event.description;
                    document.getElementById('event-hour-input').value = event.hour || '';
                    // Marcar os checkboxes de participantes
                    participantCheckboxes.forEach(checkbox => {
                        checkbox.checked = event.participants && event.participants.includes(checkbox.value);
                    });
                    modalTitle.textContent = 'Editar Evento';
                    deleteEventBtn.style.display = 'inline-block';
                });

                list.appendChild(item);
            });

            document.querySelector('.modal-content').appendChild(list);
        }

        eventModal.style.display = 'flex';
    }

    function closeModal() {
        eventModal.style.display = 'none';
    }

    function resetModal() {
        modalTitle.textContent = 'Adicionar Evento';
        eventIdInput.value = '';
        eventTitleInput.value = '';
        eventDescInput.value = '';
        document.getElementById('event-hour-input').value = '';
        // Desmarcar todos os checkboxes de participantes
        participantCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        deleteEventBtn.style.display = 'none';
    }

    function saveEvent() {
        const title = eventTitleInput.value.trim();
        if (!title) {
            alert('O título do evento é obrigatório!');
            return;
        }

        const description = eventDescInput.value.trim();
        const eventId = eventIdInput.value || `${selectedDate}-${Date.now()}`;
        const hour = document.getElementById('event-hour-input').value;

        // Coletar os participantes selecionados
        const selectedParticipants = Array.from(participantCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const eventData = {
            id: eventId,
            title,
            description,
            hour,
            participants: selectedParticipants // Adiciona os participantes ao objeto do evento
        };

        const transaction = db.transaction(['events'], 'readwrite');
        const store = transaction.objectStore('events');
        store.put(eventData);

        transaction.oncomplete = () => {
            closeModal();
            renderCalendar();
        };

        transaction.onerror = (event) => console.error("Erro ao salvar evento:", event.target.errorCode);
    }

    function deleteEvent() {
        const eventId = eventIdInput.value;
        if (!eventId) return;

        const transaction = db.transaction(['events'], 'readwrite');
        const store = transaction.objectStore('events');
        store.delete(eventId);

        transaction.oncomplete = () => {
            closeModal();
            renderCalendar();
        };

        transaction.onerror = (event) => console.error("Erro ao deletar evento:", event.target.errorCode);
    }

    async function getEventsForMonth(year, month) {
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(['events'], 'readonly');
            const store = transaction.objectStore('events');
            const monthStr = `${year}-${String(month + 1).padStart(2, '0')}`;
            const request = store.getAll();

            request.onsuccess = () => {
                const allEvents = request.result;
                const monthEvents = allEvents.filter(e => e.id.startsWith(monthStr));
                resolve(monthEvents);
            };

            request.onerror = (event) => reject("Erro ao buscar eventos:", event.target.errorCode);
        });
    }

    async function getEventsForDate(dateStr) {
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(['events'], 'readonly');
            const store = transaction.objectStore('events');
            const request = store.getAll();

            request.onsuccess = () => {
                const allEvents = request.result;
                const dateEvents = allEvents.filter(e => e.id.startsWith(dateStr));
                resolve(dateEvents);
            };

            request.onerror = (event) => reject("Erro ao buscar eventos:", event.target.errorCode);
        });
    }

    async function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const monthName = new Date(year, month).toLocaleString('pt-br', { month: 'long' });

        doc.setFontSize(20);
        doc.text(`Relatório de Eventos - ${monthName.charAt(0).toUpperCase() + monthName.slice(1)} ${year}`, 14, 22);

        const events = await getEventsForMonth(year, month);

        if (events.length === 0) {
            doc.setFontSize(12);
            doc.text("Nenhum evento agendado para este mês.", 14, 35);
        } else {
            events.sort((a, b) => new Date(a.id.split('-')[0]) - new Date(b.id.split('-')[0]));

            const tableBody = events.map(event => {
                const parts = event.id.split('-');
                const datePart = `${parts[0]}-${parts[1]}-${parts[2]}`;
                const formattedDate = new Date(datePart).toLocaleDateString('pt-BR');
                const participants = event.participants && event.participants.length > 0 ? event.participants.join(', ') : "Nenhum";
                return [
                    formattedDate,
                    event.hour || "—",
                    event.title,
                    event.description || "Sem descrição",
                    participants // Adiciona os participantes à linha da tabela
                ];
            });


            doc.autoTable({
                head: [["Data", "Horário", "Título", "Descrição", "Participantes"]], // Adiciona "Participantes" ao cabeçalho
                body: tableBody,
                startY: 30
            });
        }

        doc.save(`Relatorio_${monthName}_${year}.pdf`);
    }

    // EVENT LISTENERS
    prevMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });

    nextMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });

    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => {
        if (event.target == eventModal) closeModal();
    });

    saveEventBtn.addEventListener('click', saveEvent);
    deleteEventBtn.addEventListener('click', deleteEvent);
    exportPdfBtn.addEventListener('click', exportToPDF);

    // INICIALIZAÇÃO
    initDB();
});

Para que isso funcione, você também precisará adicionar o HTML para os checkboxes dentro do seu modal de eventos (no arquivo HTML que você não forneceu). Aqui está um exemplo de como seria:

HTML

<div class="form-group">
    <label>Quem participa:</label><br>
    <input type="checkbox" id="ancients" name="event-participant" value="Anciãos">
    <label for="ancients">Anciãos</label><br>

    <input type="checkbox" id="deacons" name="event-participant" value="Diáconos">
    <label for="deacons">Diáconos</label><br>

    <input type="checkbox" id="coop_of" name="event-participant" value="Coop. Of">
    <label for="coop_of">Coop. Of</label><br>

    <input type="checkbox" id="coop_young" name="event-participant" value="Coop. Jovens">
    <label for="coop_young">Coop. Jovens</label><br>

    <input type="checkbox" id="adm" name="event-participant" value="ADM">
    <label for="adm">ADM</label><br>

    <input type="checkbox" id="sisters_pia" name="event-participant" value="Irmãs PIA">
    <label for="sisters_pia">Irmãs PIA</label><br>

    <input type="checkbox" id="doorkeepers" name="event-participant" value="Porteiros">
    <label for="doorkeepers">Porteiros</label><br>

    <input type="checkbox" id="council_ancients" name="event-participant" value="Conselho Anciãos">
    <label for="council_ancients">Conselho Anciãos</label><br>

    <input type="checkbox" id="council_deacons" name="event-participant" value="Conselho Diáconos">
    <label for="council_deacons">Conselho Diáconos</label><br>
</div>
Resumo das Alterações:

participantCheckboxes constante: Adicionada uma nova constante para selecionar todos os checkboxes de participantes.
resetModal(): Modificada para desmarcar todos os checkboxes quando o modal é resetado.
saveEvent(): Agora coleta os valores dos checkboxes marcados e os salva como um array participants no objeto do evento.
openModal(): Ao editar um evento, ele agora verifica os participants salvos no evento e marca os checkboxes correspondentes.
exportToPDF(): A função exportToPDF foi atualizada para incluir a coluna "Participantes" no cabeçalho da tabela e para exibir os participantes (unidos por vírgula) na linha correspondente do relatório. Se não houver participantes, exibirá "Nenhum".
Com essas modificações, você terá a funcionalidade desejada de selecionar múltiplos participantes e vê-los no relatório PDF.







index (2).html
HTML
aqui está o html.



Análise
Okay, com o HTML fornecido, posso te dar a versão completa das modificações necessárias.

Você precisa adicionar o bloco de checkboxes dentro da div modal-content no seu arquivo index (2).html, logo abaixo da textarea de descrição do evento.

1. Modifique o index (2).html para incluir os checkboxes:

HTML

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agenda Profissional</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="calendar-container">
        <div id="calendar-header">
            <button id="prev-month-btn">&lt;</button>
            <h2 id="month-year-str"></h2>
            <button id="next-month-btn">&gt;</button>
        </div>
        <div id="weekdays-container">
            <div>Dom</div>
            <div>Seg</div>
            <div>Ter</div>
            <div>Qua</div>
            <div>Qui</div>
            <div>Sex</div>
            <div>Sáb</div>
        </div>
        <div id="calendar-days"></div>
        <button id="export-pdf-btn">Exportar Mês como PDF</button>
    </div>

    <div id="event-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h3 id="modal-title">Adicionar Evento</h3>
            <input type="hidden" id="event-id">
            <input type="text" id="event-title-input" placeholder="Título do Evento" required>
            <input type="time" id="event-hour-input" placeholder="Hora do Evento" required>
            <textarea id="event-desc-input" placeholder="Descrição do Evento"></textarea>

            <div class="form-group participant-group">
                <label>Quem participa:</label><br>
                <input type="checkbox" id="ancients" name="event-participant" value="Anciãos">
                <label for="ancients">Anciãos</label><br>

                <input type="checkbox" id="deacons" name="event-participant" value="Diáconos">
                <label for="deacons">Diáconos</label><br>

                <input type="checkbox" id="coop_of" name="event-participant" value="Coop. Of">
                <label for="coop_of">Coop. Of</label><br>

                <input type="checkbox" id="coop_young" name="event-participant" value="Coop. Jovens">
                <label for="coop_young">Coop. Jovens</label><br>

                <input type="checkbox" id="adm" name="event-participant" value="ADM">
                <label for="adm">ADM</label><br>

                <input type="checkbox" id="sisters_pia" name="event-participant" value="Irmãs PIA">
                <label for="sisters_pia">Irmãs PIA</label><br>

                <input type="checkbox" id="doorkeepers" name="event-participant" value="Porteiros">
                <label for="doorkeepers">Porteiros</label><br>

                <input type="checkbox" id="council_ancients" name="event-participant" value="Conselho Anciãos">
                <label for="council_ancients">Conselho Anciãos</label><br>

                <input type="checkbox" id="council_deacons" name="event-participant" value="Conselho Diáconos">
                <label for="council_deacons">Conselho Diáconos</label><br>
            </div>
            <button id="save-event-btn">Salvar</button>
            <button id="delete-event-btn" class="delete-btn">Excluir</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
2. O arquivo script.js permanece o mesmo que a versão que eu forneci anteriormente:

JavaScript

document.addEventListener('DOMContentLoaded', () => {
    // ELEMENTOS DO DOM
    const monthYearStr = document.getElementById('month-year-str');
    const calendarDays = document.getElementById('calendar-days');
    const prevMonthBtn = document.getElementById('prev-month-btn');
    const nextMonthBtn = document.getElementById('next-month-btn');
    const exportPdfBtn = document.getElementById('export-pdf-btn');

    // ELEMENTOS DO MODAL
    const eventModal = document.getElementById('event-modal');
    const modalTitle = document.getElementById('modal-title');
    const eventIdInput = document.getElementById('event-id');
    const eventTitleInput = document.getElementById('event-title-input');
    const eventDescInput = document.getElementById('event-desc-input');
    const saveEventBtn = document.getElementById('save-event-btn');
    const deleteEventBtn = document.getElementById('delete-event-btn');
    const closeBtn = document.querySelector('.close-btn');

    // NOVOS ELEMENTOS DO MODAL PARA PARTICIPANTES
    const participantCheckboxes = document.querySelectorAll('input[name="event-participant"]'); // Seleciona todos os checkboxes de participantes

    // ESTADO DO CALENDÁRIO
    let currentDate = new Date();
    let db;
    let selectedDate;

    // INICIALIZAÇÃO DO INDEXEDDB
    function initDB() {
        const request = indexedDB.open('agendaDB', 1);

        request.onerror = (event) => console.error("Erro no IndexedDB:", event.target.errorCode);

        request.onsuccess = (event) => {
            db = event.target.result;
            renderCalendar();
        };

        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            db.createObjectStore('events', { keyPath: 'id' });
        };
    }

    // RENDERIZAÇÃO DO CALENDÁRIO
    async function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        monthYearStr.textContent = `${new Date(year, month).toLocaleString('pt-br', { month: 'long' })} ${year}`;
        calendarDays.innerHTML = '';

        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        const events = await getEventsForMonth(year, month);

        for (let i = 0; i < firstDayOfMonth; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.classList.add('day', 'empty');
            calendarDays.appendChild(emptyDay);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const daySquare = document.createElement('div');
            daySquare.classList.add('day');
            daySquare.textContent = day;
            daySquare.dataset.date = new Date(year, month, day).toISOString().split('T')[0];

            const today = new Date();
            if (year === today.getFullYear() && month === today.getMonth() && day === today.getDate()) {
                daySquare.classList.add('today');
            }

            const dateStr = daySquare.dataset.date;
            if (events.some(e => e.id.startsWith(dateStr))) {
                const eventIndicator = document.createElement('div');
                eventIndicator.classList.add('event-indicator');
                daySquare.appendChild(eventIndicator);
            }

            daySquare.addEventListener('click', () => openModal(daySquare.dataset.date));
            calendarDays.appendChild(daySquare);
        }
    }

    async function openModal(date) {
        selectedDate = date;
        resetModal();

        const events = await getEventsForDate(date);

        modalTitle.textContent = 'Adicionar Evento';

        const existingList = document.getElementById('event-list');
        if (existingList) existingList.remove();

        if (events.length > 0) {
            const list = document.createElement('ul');
            list.id = 'event-list';
            list.style.marginTop = '15px';

            events.forEach(event => {
                const item = document.createElement('li');
                item.textContent = `${event.hour || '—'} - ${event.title}`;
                item.style.cursor = 'pointer';
                item.style.marginBottom = '5px';
                item.style.borderBottom = '1px solid #ccc';
                item.style.padding = '5px 0';

                item.addEventListener('click', () => {
                    eventIdInput.value = event.id;
                    eventTitleInput.value = event.title;
                    eventDescInput.value = event.description;
                    document.getElementById('event-hour-input').value = event.hour || '';
                    // Marcar os checkboxes de participantes
                    participantCheckboxes.forEach(checkbox => {
                        checkbox.checked = event.participants && event.participants.includes(checkbox.value);
                    });
                    modalTitle.textContent = 'Editar Evento';
                    deleteEventBtn.style.display = 'inline-block';
                });

                list.appendChild(item);
            });

            document.querySelector('.modal-content').appendChild(list);
        }

        eventModal.style.display = 'flex';
    }

    function closeModal() {
        eventModal.style.display = 'none';
    }

    function resetModal() {
        modalTitle.textContent = 'Adicionar Evento';
        eventIdInput.value = '';
        eventTitleInput.value = '';
        eventDescInput.value = '';
        document.getElementById('event-hour-input').value = '';
        // Desmarcar todos os checkboxes de participantes
        participantCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        deleteEventBtn.style.display = 'none';
    }

    function saveEvent() {
        const title = eventTitleInput.value.trim();
        if (!title) {
            alert('O título do evento é obrigatório!');
            return;
        }

        const description = eventDescInput.value.trim();
        const eventId = eventIdInput.value || `${selectedDate}-${Date.now()}`;
        const hour = document.getElementById('event-hour-input').value;

        // Coletar os participantes selecionados
        const selectedParticipants = Array.from(participantCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const eventData = {
            id: eventId,
            title,
            description,
            hour,
            participants: selectedParticipants // Adiciona os participantes ao objeto do evento
        };

        const transaction = db.transaction(['events'], 'readwrite');
        const store = transaction.objectStore('events');
        store.put(eventData);

        transaction.oncomplete = () => {
            closeModal();
            renderCalendar();
        };

        transaction.onerror = (event) => console.error("Erro ao salvar evento:", event.target.errorCode);
    }

    function deleteEvent() {
        const eventId = eventIdInput.value;
        if (!eventId) return;

        const transaction = db.transaction(['events'], 'readwrite');
        const store = transaction.objectStore('events');
        store.delete(eventId);

        transaction.oncomplete = () => {
            closeModal();
            renderCalendar();
        };

        transaction.onerror = (event) => console.error("Erro ao deletar evento:", event.target.errorCode);
    }

    async function getEventsForMonth(year, month) {
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(['events'], 'readonly');
            const store = transaction.objectStore('events');
            const monthStr = `${year}-${String(month + 1).padStart(2, '0')}`;
            const request = store.getAll();

            request.onsuccess = () => {
                const allEvents = request.result;
                const monthEvents = allEvents.filter(e => e.id.startsWith(monthStr));
                resolve(monthEvents);
            };

            request.onerror = (event) => reject("Erro ao buscar eventos:", event.target.errorCode);
        });
    }

    async function getEventsForDate(dateStr) {
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(['events'], 'readonly');
            const store = transaction.objectStore('events');
            const request = store.getAll();

            request.onsuccess = () => {
                const allEvents = request.result;
                const dateEvents = allEvents.filter(e => e.id.startsWith(dateStr));
                resolve(dateEvents);
            };

            request.onerror = (event) => reject("Erro ao buscar eventos:", event.target.errorCode);
        });
    }

    async function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const monthName = new Date(year, month).toLocaleString('pt-br', { month: 'long' });

        doc.setFontSize(20);
        doc.text(`Relatório de Eventos - ${monthName.charAt(0).toUpperCase() + monthName.slice(1)} ${year}`, 14, 22);

        const events = await getEventsForMonth(year, month);

        if (events.length === 0) {
            doc.setFontSize(12);
            doc.text("Nenhum evento agendado para este mês.", 14, 35);
        } else {
            events.sort((a, b) => new Date(a.id.split('-')[0]) - new Date(b.id.split('-')[0]));

            const tableBody = events.map(event => {
                const parts = event.id.split('-');
                const datePart = `${parts[0]}-${parts[1]}-${parts[2]}`;
                const formattedDate = new Date(datePart).toLocaleDateString('pt-BR');
                const participants = event.participants && event.participants.length > 0 ? event.participants.join(', ') : "Nenhum";
                return [
                    formattedDate,
                    event.hour || "—",
                    event.title,
                    event.description || "Sem descrição",
                    participants
                ];
            });


            doc.autoTable({
                head: [["Data", "Horário", "Título", "Descrição", "Participantes"]],
                body: tableBody,
                startY: 30
            });
        }

        doc.save(`Relatorio_${monthName}_${year}.pdf`);
    }

    // EVENT LISTENERS
    prevMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });

    nextMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });

    closeBtn.addEventListener('click', closeModal);
    window.addEventListener('click', (event) => {
        if (event.target == eventModal) closeModal();
    });

    saveEventBtn.addEventListener('click', saveEvent);
    deleteEventBtn.addEventListener('click', deleteEvent);
    exportPdfBtn.addEventListener('click', exportToPDF);

    // INICIALIZAÇÃO
    initDB();
});
Explicação das Mudanças (como no script.js anterior):

index (2).html:
Foi adicionado um div com a classe form-group participant-group que contém todos os checkboxes para os participantes. Cada checkbox tem um id único, um name="event-participant" (que é crucial para o JavaScript selecioná-los em grupo) e um value que corresponde ao nome do participante.
script.js:
participantCheckboxes constante: Foi adicionada no início do script para selecionar todos os elementos com o name="event-participant".
resetModal(): Modificada para iterar sobre participantCheckboxes e desmarcar todos eles (checkbox.checked = false;) sempre que o modal é resetado ou aberto para adicionar um novo evento.
saveEvent(): Antes de salvar o evento no IndexedDB, ela agora coleta os valores de todos os checkboxes que estão marcados (checkbox.checked). Esses valores são armazenados em um array chamado selectedParticipants, que é então adicionado ao objeto eventData como a propriedade participants.
openModal(): Quando um evento existente é selecionado para edição, esta função agora verifica se o evento possui uma propriedade participants. Se sim, ela itera sobre participantCheckboxes e marca aqueles cujos value estão presentes no array event.participants.
exportToPDF(): A função de exportação para PDF foi atualizada. O cabeçalho da tabela no PDF agora inclui "Participantes". Na geração do tableBody, os participantes são obtidos do event.participants (se existirem) e unidos em uma única string separada por vírgulas para exibição no PDF. Se não houver participantes, exibirá "Nenhum".
Com essas atualizações no seu HTML e JavaScript, você terá a funcionalidade completa de selecionar múltiplos participantes para um evento e vê-los listados no relatório PDF.






Voltou a mostrar um dia antes do registro no relatório


Se o relatório está mostrando a data um dia antes do registro, isso geralmente indica um problema com o fuso horário ou como a data é tratada no JavaScript. O IndexedDB armazena as datas como strings ISO (formato "YYYY-MM-DDTHH:mm:ss.sssZ"), que são fusos horários universais (UTC). Quando você as converte de volta para um objeto Date no JavaScript e depois usa toLocaleDateString(), a conversão pode estar ajustando para o fuso horário local e causando essa diferença de um dia.

Vamos revisar a parte do código que formata a data para o relatório PDF e fazer um ajuste.

O problema provavelmente está nesta linha na função exportToPDF():

JavaScript

const formattedDate = new Date(datePart).toLocaleDateString('pt-BR');
Quando você cria new Date(datePart) onde datePart é algo como "YYYY-MM-DD", o JavaScript interpreta isso como uma data UTC 00:00:00 nesse dia. No entanto, toLocaleDateString() a converte para a data no fuso horário local. Se o seu fuso horário local for negativo em relação ao UTC (como -03:00 para o Brasil), ele pode subtrair horas e, se cruzar a meia-noite, acabar no dia anterior.

Para corrigir isso, você pode garantir que a data seja tratada como uma data local desde o início, ou manipular a string da data diretamente sem a conversão de fuso horário que new Date() pode introduzir em certos contextos.

A forma mais simples e robusta de garantir que a data exibida no relatório seja exatamente a data registrada sem se preocupar com fusos horários na conversão é manipular as strings diretamente, ou garantir que a data seja criada sem a inferência de fuso horário.

Vamos ajustar a função exportToPDF no seu script.js:

JavaScript

// ... (código anterior) ...

    async function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const monthName = new Date(year, month).toLocaleString('pt-br', { month: 'long' });

        doc.setFontSize(20);
        doc.text(`Relatório de Eventos - ${monthName.charAt(0).toUpperCase() + monthName.slice(1)} ${year}`, 14, 22);

        const events = await getEventsForMonth(year, month);

        if (events.length === 0) {
            doc.setFontSize(12);
            doc.text("Nenhum evento agendado para este mês.", 14, 35);
        } else {
            // Ordena os eventos pela data, como você já faz
            events.sort((a, b) => {
                const dateA = a.id.split('-').slice(0, 3).join('-'); // Pega YYYY-MM-DD
                const dateB = b.id.split('-').slice(0, 3).join('-'); // Pega YYYY-MM-DD
                return new Date(dateA) - new Date(dateB);
            });

            const tableBody = events.map(event => {
                // A data já está armazenada no formato YYYY-MM-DD no início do ID
                // Basta extrair essa parte do ID para usar diretamente
                const datePart = event.id.split('-').slice(0, 3).join('-'); // Pega "YYYY-MM-DD"
                
                // Converte para o formato dd/mm/yyyy para exibição
                const [y, m, d] = datePart.split('-');
                const formattedDate = `${d}/${m}/${y}`; // Formato dd/mm/yyyy para o Brasil

                const participants = event.participants && event.participants.length > 0 ? event.participants.join(', ') : "Nenhum";
                return [
                    formattedDate,
                    event.hour || "—",
                    event.title,
                    event.description || "Sem descrição",
                    participants
                ];
            });


            doc.autoTable({
                head: [["Data", "Horário", "Título", "Descrição", "Participantes"]],
                body: tableBody,
                startY: 30
            });
        }

        doc.save(`Relatorio_${monthName}_${year}.pdf`);
    }

// ... (restante do código) ...
O que foi mudado e por quê:

const datePart = event.id.split('-').slice(0, 3).join('-');: Esta linha já existia e está correta para extrair a data "YYYY-MM-DD" do ID do evento.
const [y, m, d] = datePart.split('-');: Aqui, a string datePart (ex: "2024-06-10") é dividida em ano (y), mês (m) e dia (d).
const formattedDate =d/{m}/${y};: Em vez de criar um objeto Date e usar toLocaleDateString(), construímos a string de data diretamente no formato "dd/mm/yyyy" a partir das partes extraídas. Isso evita qualquer problema de conversão de fuso horário, garantindo que a data exibida seja exatamente a data "calendário" que você registrou.
Com essa alteração, o relatório PDF deve mostrar a data exata do registro, sem o deslocamento de um dia.







style (2)
CSS

quero deixar o botão de exportar PDF centralizado em baixo. com uma cor degradê.



Análise
Com certeza! Para centralizar o botão de exportar PDF e aplicar uma cor degradê, você precisará modificar o seu arquivo style (2).css e fazer uma pequena alteração no index (2).html para ajustar o alinhamento.

1. Modifique o style (2).css:

Adicione ou modifique as seguintes regras CSS para o #export-pdf-btn:

CSS

/* ... (código CSS anterior) ... */

#export-pdf-btn {
    display: block; /* Garante que ocupe a largura total para margin auto funcionar */
    width: 30%; /* Mantém a largura de 30% como você tinha */
    max-width: 250px; /* Adiciona um max-width para não ficar muito grande em telas largas */
    padding: 12px;
    margin: 10px auto 0 auto; /* Centraliza horizontalmente: top 10px, auto para laterais, bottom 0, auto para laterais */
    background: linear-gradient(45deg, #27ae60, #2ecc71); /* Degradê: do verde escuro para um verde mais claro */
    color: var(--light-text);
    border: none;
    border-radius: 5px; /* Ajuste o border-radius para um valor fixo, 'center' não é válido */
    cursor: pointer;
    font-size: 1em;
    transition: background 0.3s ease; /* Transição para o hover */
}

#export-pdf-btn:hover {
    background: linear-gradient(45deg, #229a53, #27ae60); /* Degradê mais escuro no hover */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Adiciona uma pequena sombra no hover */
}

/* ... (restante do código CSS) ... */
Explicação das mudanças no style (2).css:

display: block;: Essencial para que margin: auto possa centralizar o elemento.
max-width: 250px;: Adicionei um max-width para que o botão não fique excessivamente largo em telas muito grandes, mantendo uma proporção agradável.
margin: 10px auto 0 auto;: O valor auto para as margens esquerda e direita é o que centraliza um elemento block horizontalmente. Os outros valores (10px para top e 0 para bottom) controlam o espaçamento vertical.
background: linear-gradient(45deg, #27ae60, #2ecc71);: Aplica um degradê linear.
45deg: Define o ângulo do degradê.
#27ae60: É a cor inicial (um verde mais escuro).
#2ecc71: É a cor final (um verde mais claro).
border-radius: 5px;: center não é um valor CSS válido para border-radius, ele deve ser um valor numérico em px ou %. Mudei para 5px para um arredondamento suave.
transition: background 0.3s ease;: Ajustei a transição para o background para que a mudança de degradê seja suave.
#export-pdf-btn:hover:
background: linear-gradient(45deg, #229a53, #27ae60);: Mudei as cores do degradê no hover para dar um efeito visual de aprofundamento ou destaque.
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);: Adicionei uma sombra sutil no hover para dar um efeito de "elevação".
2. Verifique o index (2).html:

Não é estritamente necessário fazer alterações no index (2).html para centralizar o botão com as mudanças no CSS acima, pois display: block e margin: auto já fazem o trabalho. No entanto, é sempre bom garantir que o botão não esteja dentro de um contêiner que restrinja seu layout.

Se o botão #export-pdf-btn já é um elemento direto dentro de #calendar-container, então as mudanças no CSS são suficientes.

Se por algum motivo o botão não centralizar, verifique se não há algum estilo no #calendar-container ou em algum elemento pai que esteja definindo display: flex com justify-content diferente de center ou space-around que possa estar interferindo no margin: auto. Mas, com as informações que você forneceu, as alterações no CSS devem funcionar perfeitamente.

Com essas modificações, seu botão de exportar PDF estará centralizado e terá um visual mais moderno com o degradê.

Peça para o Gemini escrever um documento ou código editável

Quero testar












Deep Research

Canvas

Suas conversas com Universidade Federal do Pampa não são usadas para melhorar nossos modelos. O Gemini pode cometer erros. Por isso, é bom checar as respostas. Sua privacidade e o Gemini

:root {
    --primary-color: #2c3e50; /* Azul Escuro */
    --secondary-color: #3498db; /* Azul Brilhante */
    --light-color: #ecf0f1;
    --dark-text: #34495e;
    --light-text: #ffffff;
    --danger-color: #e74c3c;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--light-color);
    color: var(--dark-text);
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 10px;
    box-sizing: border-box;
}

#calendar-container {
    width: 95%;
    max-width: 900px;
    background-color: var(--light-text);
    border-radius: 10px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 25px;
}

#calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

#calendar-header h2 {
    color: var(--primary-color);
    font-size: 1.8em;
}

#calendar-header button {
    background-color: var(--secondary-color);
    color: var(--light-text);
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

#calendar-header button:hover {
    background-color: #2980b9;
}

#weekdays-container {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    font-weight: bold;
    color: var(--secondary-color);
    padding-bottom: 10px;
    border-bottom: 2px solid var(--light-color);
    margin-bottom: 10px;
    text-align: center;
}

#calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
}

.day {
    padding: 15px;
    text-align: right;
    border: 1px solid var(--light-color);
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
    min-height: 80px;
    position: relative;
}

.day:hover {
    background-color: var(--secondary-color);
    color: var(--light-text);
}

.day.empty {
    background-color: transparent;
    cursor: default;
    border: none;
}

.day.today {
    background-color: var(--primary-color);
    color: var(--light-text);
}

.event-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--danger-color);
    position: absolute;
    top: 10px;
    left: 10px;
}

#export-pdf-btn {
    display: block;
    width: 30%;
    padding: 12px;
    margin-top: 10px;
    background-color: #27ae60;
    color: var(--light-text);
    border: none;
    border-radius: center;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s;
}

#export-pdf-btn:hover {
    background-color: #229954;
}

/* Estilos do Modal */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: #fefefe;
    padding: 30px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

.close-btn {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

#modal-title {
    color: var(--primary-color);
    margin-top: 0;
}

#event-title-input, #event-desc-input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

#event-desc-input {
    min-height: 100px;
    resize: vertical;
}

#save-event-btn, #delete-event-btn {
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    color: white;
    cursor: pointer;
    transition: opacity 0.3s;
}

#save-event-btn {
    background-color: var(--secondary-color);
}

#delete-event-btn {
    background-color: var(--danger-color);
    display: none; /* Oculto por padrão */
}

#save-event-btn:hover, #delete-event-btn:hover {
    opacity: 0.8;
}
@media (max-width: 600px) {
    #calendar-header {
        flex-direction: column;
        gap: 10px;
    }

    #calendar-header h2 {
        font-size: 1.4em;
        text-align: center;
    }

    #calendar-header button {
        width: 100%;
    }

    #weekdays-container {
        font-size: 0.8em;
    }

    .day {
        padding: 10px;
        min-height: 60px;
    }

    #export-pdf-btn {
        font-size: 0.9em;
        padding: 10px;
    }

    .modal-content {
        padding: 20px;
    }
}
#event-list {
    list-style: none;
    padding: 0;
    max-height: 200px;
    overflow-y: auto;
    border-top: 1px solid #ccc;
    margin-top: 20px;
}

#event-list li:hover {
    background-color: #f0f0f0;
}
style (2).css
Exibindo style (2).css.
